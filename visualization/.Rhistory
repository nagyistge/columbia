library(quantedaData)
install.packages("quantedaData")
require(quanteda)
data(iebudgetsCorpus, package = "quantedaData")
data(iebudgetsCorpus, package = "quanteda")
??quantedaData
devtools::install_github("kbenoit/quantedaData")
data(iebudgetsCorpus, package = "quantedaData")
summary(iebudgetsCorpus, 10)
ieFinMin <- subset(iebudgetsCorpus, number=="01" & debate == "BUDGET")
ieFinMin
ieFinMin[1]
summary(ieFinMin)
dfmFM <- dfm(ieFinMin)
plot(2008:2012, lexdiv(dfmFM, "C"), xlab="Year", ylab="Herndan's C", type="b",
main = "World's Crudest Lexical Diversity Plot")
data(SOTUCorpus, package = "quantedaData")
fk <- readability(SOTUCorpus, "Flesch.Kincaid")
year <- lubridate::year(docvars(SOTUCorpus, "Date"))
library(lubridate)
install.packages("lubridate")
library(lubridate)
year <- lubridate::year(docvars(SOTUCorpus, "Date"))
year
require(ggplot2)
partyColours <- c("blue", "blue", "black", "black", "red", "red")
p <- ggplot(data = docvars(SOTUCorpus), aes(x = year, y = fk)) + #, group = delivery)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
geom_smooth(alpha=0.2, linetype=1, color="grey70", method = "loess", span = .34) +
xlab("") +
ylab("Flesch-Kincaid") +
geom_point(aes(colour = party)) +
scale_colour_manual(values = partyColours) +
geom_line(aes(), alpha=0.3, size = 1) +
ggtitle("Text Complexity in State of the Union Addresses") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
quartz(height=7, width=12)
print(p)
presDfm <- dfm(inaugCorpus, ignoredFeatures = stopwords("english"))
similarity(presDfm, "1985-Reagan", n=5, margin="documents")
similarity(presDfm, c("2009-Obama" , "2013-Obama"), n=5, margin="documents", method = "cosine")
similarity(presDfm, c("2009-Obama" , "2013-Obama"), n=5, margin="documents", method = "Hellinger")
similarity(presDfm, c("2009-Obama" , "2013-Obama"), n=5, margin="documents", method = "eJaccard")
similarity(presDfm, c("fair", "health", "terror"), method="cosine")
txt <- "Hey @kenbenoit #textasdata: The quick, brown fox jumped over the lazy dog!"
(toks1 <- tokenize(toLower(txt), removePunct = TRUE))
tokenize(toLower(txt), removePunct = TRUE, ngrams = 2)
tokenize(toLower(txt), removePunct = TRUE, ngrams = c(1,3))
ngrams(tokens, c(1, 3, 5))
tokens <- tokenize(toLower("Insurgents killed in ongoing fighting."),
removePunct = TRUE, simplify = TRUE)
ngrams(tokens, c(1, 3, 5))
skipgrams(tokens, n = 2, k = 2, concatenator = " ")
skipgrams(tokens, n = 3, k = 2, concatenator = " ")
collocs2 <- collocations(inaugTexts, size = 2, method = "all")
head(collocs2, 20)
collocs3 <- collocations(inaugTexts, size = 3, method = "all")
head(collocs3, 20)
head(removeFeatures(collocs2, stopwords("english")), 20)
head(removeFeatures(collocs3, stopwords("english")), 20)
summary(inaugTexts)
summary(inaugTexts[1:5])
oneText <- inaugTexts[1]
oneText[2]
tmp <- inaugTexts[1:5]
length(inaugTexts)
length(oneText)
nchar(oneText)
nchar(inaugTexts[5:7])
?tokenize
tokens <- tokenize('Today is Thursday in Canberra. It is yesterday in London.')
tokens
vec <- c(one='This is text one', two='This, however, is the second text')
tokenize(vec)
tokenize(toLower(vec), removePunct = TRUE)
require(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
require(dplyr)
inaugTokens <- tokenize(toLower(inaugTexts))
inaugTokens[2]
inaugDfm <- dfm(inaugTokens)
trimmedInaugDfm <- trim(inaugDfm, minDoc=5, minCount=10)
weightedTrimmedDfm <- weight(trimmedInaugDfm, type='tfidf')
require(dplyr)
inaugDfm2 <- dfm(inaugTokens) %>% trim(minDoc=5, minCount=10) %>% weight(type='tfidf')
methods(dfm)
methods(class = "tokenizedTexts")
summary(inaugTexts[52:57])
dv <- data.frame(Party = c('dem','dem','rep','rep','dem','dem'))
recentCorpus <- corpus(inaugTexts[52:57], docvars=dv)
summary(recentCorpus)
partyDfm <- dfm(recentCorpus, groups='Party', ignoredFeatures=(stopwords('english')))
wordcloud::comparison.cloud(t(as.matrix(partyDfm)))
require(quanteda)
s1 <- 'my example text'
length(s1)
nchar(s1)
s2 <- c('This is', 'my example text.', 'So imaginative.')
nchar(s2)
sum(nchar(s2))
which.max(nchar(inaugTexts))
inaguTexts
inaugTexts
which.min(nchar(inaugTexts))
s1 <- 'This file contains many fascinating example sentences.'
s1[6:9]
s1 <- 'This file contains many fascinating example sentences.'
substr(s1, 6,9)
names(inaugTexts)
s1 <- 'split this string'
strsplit(s1, 'this')
parts <- strsplit(names(inaugTexts), '-')
years <- sapply(parts, function(x) x[1])
parts
years
pres <-  sapply(parts, function(x) x[2])
paste('one','two','three')
paste('one','two','three', sep='_')
paste(years, pres, sep='-')
paste(years, pres, collapse='-')
tolower(s1)
toupper(s1)
tolower(c("This", "is", "Kεφαλαία Γράμματα"))
methods(toLower)
tolower(s1) == toupper(s1)
'apples'=='oranges'
c1 <- c('apples', 'oranges', 'pears')
'pears' %in% c1
grep('orangef', 'these are oranges')
require(quanteda)
summary(inaugTexts)
summary(inaugTexts[1:5])
inaugTexts
class(inaugTexts)
inaugTexts[1]
length(inaugTexts)
library(ggmap)
library(ggplot2)
install.packages(ggmap)
install.packages("ggmap")
library(ggmap)
library(ggplot2)
nycmap <- get_map("New York City", zoom=11)
nyc <- ggmap(nycmap) + xlim (-74.1, -73.8) + ylim (40.7, 40.85)
long <- c(-73.99313973, -73.86915874, -73.98569489, -73.96860943, -73.96086502, -73.95382469,
-73.99539647, -73.96742325, -74.00741679, -73.78861455)
lat <- c(40.74381839, 40.77222538, 40.7645971, 40.75711012, 40.69372876, 40.77691675, 40.72765373,
40.7960495, 40.70906677, 40.6477187)
location <- data.frame(longitude=long, latitude=lat)
nyc <- nyc + geom_point(data=data, aes(x=longitude, y=latitude,color=rating))
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=10)
nyc <- ggmap(nycmap) + xlim (-74.1, -73.8) + ylim (40.7, 40.85)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=15)
nyc <- ggmap(nycmap) + xlim (-74.1, -73.8) + ylim (40.7, 40.85)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=20)
nyc <- ggmap(nycmap) + xlim (-74.1, -73.8) + ylim (40.7, 40.85)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
len(long)
length(long)
length(lat)
View(location)
nycmap <- get_map("New York City", zoom=20)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=5)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=8)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=9)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=10)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=10.5)
nycmap <- get_map("New York City", zoom=11)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
library(ggmap)
library(ggplot2)
long <- c(-73.96953876, -73.95145817, -73.99075265, -73.94264002, -73.87230566, -74.00194481,
-73.9814195, -73.7685344 , -73.98209553)
lat <- c(40.75966902, 40.79166805, 40.74533487, 40.70977994, 40.76815091, 40.7205635,
40.66584058, 40.65431133, 40.77430645)
location <- data.frame(longitude=long, latitude=lat)
nycmap <- get_map("New York City", zoom=11)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
library(ggmap)
library(ggplot2)
long <- c(-73.98227551, -73.94894565, -73.97328617, -73.98660181, -73.87124998,
-73.97492762, -73.95253233, -73.78222692, -73.99468622, -74.0047403)
lat <- c(40.72726685, 40.8091506, 40.75436116, 40.76263573, 40.76696224, 40.78705872,
40.77328378, 40.64736145, 40.74292497, 40.70852686)
location <- data.frame(longitude=long, latitude=lat)
nycmap <- get_map("New York City", zoom=11)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
nycmap <- get_map("New York City", zoom=10)
nyc <- ggmap(nycmap)
nyc <- nyc + geom_point(data=location, aes(x=longitude, y=latitude))
nyc
setwd("~/Documents/15fall/Thesis/Columbia")
data <- read.csv("data/final.csv", stringsAsFactors = FALSE)
profile <- read.csv("data/allProfile.csv")
data2 <- data.frame(source=rep(data$source, 2), target=rep(data$target, 2),
sourceLab1=c(data$sourceLab1, data$sourceLab2),
sourcePos1=c(data$sourcePos1, data$sourcePos2),
sourceLab2=c(data$sourceLab2, data$sourceLab3),
sourcePos2=c(data$sourcePos2, data$sourcePos3),
targetLab1=c(data$targetLab1, data$targetLab2),
targetPos1=c(data$targetPos1, data$targetPos2),
targetLab2=c(data$targetLab2, data$targetLab3),
targetPos2=c(data$targetPos2, data$targetPos3),
sourceFriends=rep(data$sourceFriends, 2),
targetFollowers=rep(data$targetFollwers, 2))
data2Sub <- data2[data2$sourceLab1 != "neutral" & data2$sourceLab2 != "neutral" &
data2$targetLab1 != "neutral" & data2$targetLab2 != "neutral", ]
data2Sub$sourcePos1 <- data2Sub$sourcePos1 - 0.5
data2Sub$sourcePos2 <- data2Sub$sourcePos2 - 0.5
data2Sub$targetPos1 <- data2Sub$targetPos1 - 0.5
data2Sub$targetPos2 <- data2Sub$targetPos2 - 0.5
data2Sub$perFriend <- data2Sub$targetPos2/data2Sub$sourceFriends
model6 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetFollowers, data=data2Sub)
summary(model6)
for (cut in cutPoints[2: 16]) {
print(cut)
data2Sub$targetMedia <- data2Sub$targetFollowers < cut
print(summary(lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)))
}
cutPoints <- c(0, 50, 100, 200, 300, 400, 500, 1000, 2000, 3000, 4000, 5000, 10000, 20000, 50000, 100000, 100000000)
for (cut in cutPoints[2: 16]) {
print(cut)
data2Sub$targetMedia <- data2Sub$targetFollowers < cut
print(summary(lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)))
}
model2 <- lm(sourcePos2 ~ targetPos2 + sourcePos1 + targetPos1, data=data2Sub)
summary(model2)
setwd("~/Documents/15fall/Thesis/Columbia/visualization")
ANES <- read.csv("http://www.oberlin.edu/faculty/cdesante/assets/downloads/ANES.csv")
data2Sub$targetMedia <- data2Sub$targetFollowers < 200
model200 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)
data2Sub$targetMedia <- data2Sub$targetFollowers < 2000
model2000 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)
rownames(summary(model200)$coef)
summary(model200)$coef
model4 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1, data=data2Sub)
model4Frame <- data.frame(Variable = rownames(summary(model4)$coef),
Coefficient = summary(model4)$coef[, 1],
SE = summary(model4)$coef[, 2],
modelName = "Model 3")
model200Frame <- data.frame(Variable = rownames(summary(model200)$coef),
Coefficient = summary(model200)$coef[, 1],
SE = summary(model200)$coef[, 2],
modelName = "Model 5, Cut Point = 200")
model2000Frame <- data.frame(Variable = rownames(summary(model2000)$coef),
Coefficient = summary(model2000)$coef[, 1],
SE = summary(model2000)$coef[, 2],
modelName = "Model 5, Cut Point = 2000")
allModelFrame <- data.frame(rbind(model4Frame, model200Frame, model2000Frame))  # etc.
interval1 <- -qnorm((1-0.9)/2)  # 90% multiplier
interval2 <- -qnorm((1-0.95)/2)  # 95% multiplier
library(ggplot)
library(ggplot2)
zp1 <- ggplot(allModelFrame, aes(colour = modelName))
zp1 <- zp1 + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
zp1 <- zp1 + geom_linerange(aes(x = Variable, ymin = Coefficient - SE*interval1,
ymax = Coefficient + SE*interval1),
lwd = 1, position = position_dodge(width = 1/2))
zp1 <- zp1 + geom_pointrange(aes(x = Variable, y = Coefficient, ymin = Coefficient - SE*interval2,
ymax = Coefficient + SE*interval2),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE")
zp1 <- zp1 + coord_flip() + theme_bw()
zp1 <- zp1 + ggtitle("Comparing several models")
print(zp1)  # The trick to these is position_dodge().
data2Sub$perFriend <- data2Sub$perFriend/1000
model4 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1, data=data2Sub)
data2Sub$targetMedia <- data2Sub$targetFollowers < 200
model200 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)
data2Sub$targetMedia <- data2Sub$targetFollowers < 2000
model2000 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)
model4Frame <- data.frame(Variable = rownames(summary(model4)$coef),
Coefficient = summary(model4)$coef[, 1],
SE = summary(model4)$coef[, 2],
modelName = "Model 3")
model200Frame <- data.frame(Variable = rownames(summary(model200)$coef),
Coefficient = summary(model200)$coef[, 1],
SE = summary(model200)$coef[, 2],
modelName = "Model 5, Cut Point = 200")
model2000Frame <- data.frame(Variable = rownames(summary(model2000)$coef),
Coefficient = summary(model2000)$coef[, 1],
SE = summary(model2000)$coef[, 2],
modelName = "Model 5, Cut Point = 2000")
allModelFrame <- data.frame(rbind(model4Frame, model200Frame, model2000Frame))  # etc.
interval1 <- -qnorm((1-0.9)/2)  # 90% multiplier
interval2 <- -qnorm((1-0.95)/2)  # 95% multiplier
zp1 <- ggplot(allModelFrame, aes(colour = modelName))
zp1 <- zp1 + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
zp1 <- zp1 + geom_linerange(aes(x = Variable, ymin = Coefficient - SE*interval1,
ymax = Coefficient + SE*interval1),
lwd = 1, position = position_dodge(width = 1/2))
zp1 <- zp1 + geom_pointrange(aes(x = Variable, y = Coefficient, ymin = Coefficient - SE*interval2,
ymax = Coefficient + SE*interval2),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE")
zp1 <- zp1 + coord_flip() + theme_bw()
zp1 <- zp1 + ggtitle("Comparing several models")
print(zp1)  # The trick to these is position_dodge().
View(data2Sub)
data2Sub$perFriend <- data2Sub$perFriend*1000
model4 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1, data=data2Sub)
data2Sub$targetMedia <- data2Sub$targetFollowers < 200
model200 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)
data2Sub$targetMedia <- data2Sub$targetFollowers < 2000
model2000 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)
model4Frame <- data.frame(Variable = rownames(summary(model4)$coef),
Coefficient = summary(model4)$coef[, 1],
SE = summary(model4)$coef[, 2],
modelName = "Model 3")
model200Frame <- data.frame(Variable = rownames(summary(model200)$coef),
Coefficient = summary(model200)$coef[, 1],
SE = summary(model200)$coef[, 2],
modelName = "Model 5, Cut Point = 200")
model2000Frame <- data.frame(Variable = rownames(summary(model2000)$coef),
Coefficient = summary(model2000)$coef[, 1],
SE = summary(model2000)$coef[, 2],
modelName = "Model 5, Cut Point = 2000")
allModelFrame <- data.frame(rbind(model4Frame, model200Frame, model2000Frame))
zp1 <- ggplot(allModelFrame, aes(colour = modelName))
zp1 <- zp1 + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
zp1 <- zp1 + geom_linerange(aes(x = Variable, ymin = Coefficient - SE*interval1,
ymax = Coefficient + SE*interval1),
lwd = 1, position = position_dodge(width = 1/2))
zp1 <- zp1 + geom_pointrange(aes(x = Variable, y = Coefficient, ymin = Coefficient - SE*interval2,
ymax = Coefficient + SE*interval2),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE")
zp1 <- zp1 + coord_flip() + theme_bw()
zp1 <- zp1 + ggtitle("Comparing several models")
print(zp1)  # The trick to these is position_dodge().
View(data2Sub)
View(data2Sub)
data2Sub$perFriend <- data2Sub$perFriend*1000
View(data2Sub)
model4 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1, data=data2Sub)
data2Sub$targetMedia <- data2Sub$targetFollowers < 200
model200 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)
data2Sub$targetMedia <- data2Sub$targetFollowers < 2000
model2000 <- lm(sourcePos2 ~ perFriend + sourcePos1 + targetPos1 + targetMedia, data=data2Sub)
model4Frame <- data.frame(Variable = rownames(summary(model4)$coef),
Coefficient = summary(model4)$coef[, 1],
SE = summary(model4)$coef[, 2],
modelName = "Model 3")
model200Frame <- data.frame(Variable = rownames(summary(model200)$coef),
Coefficient = summary(model200)$coef[, 1],
SE = summary(model200)$coef[, 2],
modelName = "Model 5, Cut Point = 200")
model2000Frame <- data.frame(Variable = rownames(summary(model2000)$coef),
Coefficient = summary(model2000)$coef[, 1],
SE = summary(model2000)$coef[, 2],
modelName = "Model 5, Cut Point = 2000")
allModelFrame <- data.frame(rbind(model4Frame, model200Frame, model2000Frame))
zp1 <- ggplot(allModelFrame, aes(colour = modelName))
zp1 <- zp1 + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
zp1 <- zp1 + geom_linerange(aes(x = Variable, ymin = Coefficient - SE*interval1,
ymax = Coefficient + SE*interval1),
lwd = 1, position = position_dodge(width = 1/2))
zp1 <- zp1 + geom_pointrange(aes(x = Variable, y = Coefficient, ymin = Coefficient - SE*interval2,
ymax = Coefficient + SE*interval2),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE")
zp1 <- zp1 + coord_flip() + theme_bw()
zp1 <- zp1 + ggtitle("Comparing several models")
print(zp1)  # The trick to these is position_dodge().
a/b
data2Sub$perFriend <- data2Sub$perFriend/1000
View(data2Sub)
data <- data.frame(alterSentDivFriend1000=data2Sub$perFriend*1000, alterSentPrevious=data2Sub$targetPos1,
egoSentNow=data2Sub$sourcePos2, egoSentPrevious=data2Sub$sourcePos1)
data <- data.frame(alterSentDivFriend1000=data2Sub$perFriend*1000,
alterSentPrevious=data2Sub$targetPos1,
egoSentNow=data2Sub$sourcePos2,
egoSentPrevious=data2Sub$sourcePos1,
alterFollowers=data2Sub$targetFollowers)
data <- data.frame(alterSentDivFriend1000=data2Sub$perFriend*1000,
alterSentPrevious=data2Sub$targetPos1,
egoSentNow=data2Sub$sourcePos2,
egoSentPrevious=data2Sub$sourcePos1,
alterFollowers=data2Sub$targetFollowers)
model4 <- lm(egoSentNow ~ alterSentDivFriend1000 + egoSentPrevious + alterSentPrevious, data=data)
data$alterIsMedia <- data$alterFollowers < 200
model200 <- lm(egoSentNow ~ alterSentDivFriend1000 + egoSentPrevious + alterSentPrevious + alterIsMedia, data=data)
data$alterIsMedia <- data$alterFollowers < 2000
model2000 <- lm(egoSentNow ~ alterSentDivFriend1000 + egoSentPrevious + alterSentPrevious + alterIsMedia, data=data)
model4Frame <- data.frame(Variable = rownames(summary(model4)$coef),
Coefficient = summary(model4)$coef[, 1],
SE = summary(model4)$coef[, 2],
modelName = "Model 3")
model200Frame <- data.frame(Variable = rownames(summary(model200)$coef),
Coefficient = summary(model200)$coef[, 1],
SE = summary(model200)$coef[, 2],
modelName = "Model 5, Cut Point = 200")
model2000Frame <- data.frame(Variable = rownames(summary(model2000)$coef),
Coefficient = summary(model2000)$coef[, 1],
SE = summary(model2000)$coef[, 2],
modelName = "Model 5, Cut Point = 2000")
allModelFrame <- data.frame(rbind(model4Frame, model200Frame, model2000Frame))
zp1 <- ggplot(allModelFrame, aes(colour = modelName))
zp1 <- zp1 + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
zp1 <- zp1 + geom_linerange(aes(x = Variable, ymin = Coefficient - SE*interval1,
ymax = Coefficient + SE*interval1),
lwd = 1, position = position_dodge(width = 1/2))
zp1 <- zp1 + geom_pointrange(aes(x = Variable, y = Coefficient, ymin = Coefficient - SE*interval2,
ymax = Coefficient + SE*interval2),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE")
zp1 <- zp1 + coord_flip() + theme_bw()
zp1 <- zp1 + ggtitle("Confidence Intervals of Variables")
print(zp1)  # The trick to these is position_dodge().
model4Frame <- data.frame(Variable = rownames(summary(model4)$coef),
Coefficient = summary(model4)$coef[, 1],
SE = summary(model4)$coef[, 2],
Model_Name = "Model 3")
model200Frame <- data.frame(Variable = rownames(summary(model200)$coef),
Coefficient = summary(model200)$coef[, 1],
SE = summary(model200)$coef[, 2],
Model_Name = "Model 5, Cut Point = 200")
model2000Frame <- data.frame(Variable = rownames(summary(model2000)$coef),
Coefficient = summary(model2000)$coef[, 1],
SE = summary(model2000)$coef[, 2],
Model_Name = "Model 5, Cut Point = 2000")
# Combine these data.frames
allModelFrame <- data.frame(rbind(model4Frame, model200Frame, model2000Frame))
zp1 <- ggplot(allModelFrame, aes(colour = modelName))
zp1 <- zp1 + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
zp1 <- zp1 + geom_linerange(aes(x = Variable, ymin = Coefficient - SE*interval1,
ymax = Coefficient + SE*interval1),
lwd = 1, position = position_dodge(width = 1/2))
zp1 <- zp1 + geom_pointrange(aes(x = Variable, y = Coefficient, ymin = Coefficient - SE*interval2,
ymax = Coefficient + SE*interval2),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE")
zp1 <- zp1 + coord_flip() + theme_bw()
zp1 <- zp1 + ggtitle("Confidence Intervals of Variables")
print(zp1)  # The trick to these is position_dodge().
print(zp1)  # The trick to these is position_dodge().
zp1 <- ggplot(allModelFrame, aes(colour = Model_Name))
zp1 <- zp1 + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
zp1 <- zp1 + geom_linerange(aes(x = Variable, ymin = Coefficient - SE*interval1,
ymax = Coefficient + SE*interval1),
lwd = 1, position = position_dodge(width = 1/2))
zp1 <- zp1 + geom_pointrange(aes(x = Variable, y = Coefficient, ymin = Coefficient - SE*interval2,
ymax = Coefficient + SE*interval2),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE")
zp1 <- zp1 + coord_flip() + theme_bw()
zp1 <- zp1 + ggtitle("Confidence Intervals of Variables")
print(zp1)  # The trick to these is position_dodge().
allModelFrame
names(allModelFrame)
allModelFrame$Model <- allModelFrame$Model_Name
zp1 <- ggplot(allModelFrame, aes(colour = Model))
zp1 <- zp1 + geom_hline(yintercept = 0, colour = gray(1/2), lty = 2)
zp1 <- zp1 + geom_linerange(aes(x = Variable, ymin = Coefficient - SE*interval1,
ymax = Coefficient + SE*interval1),
lwd = 1, position = position_dodge(width = 1/2))
zp1 <- zp1 + geom_pointrange(aes(x = Variable, y = Coefficient, ymin = Coefficient - SE*interval2,
ymax = Coefficient + SE*interval2),
lwd = 1/2, position = position_dodge(width = 1/2),
shape = 21, fill = "WHITE")
zp1 <- zp1 + coord_flip() + theme_bw()
zp1 <- zp1 + ggtitle("Confidence Intervals of Variables")
print(zp1)  # The trick to these is position_dodge().
ggplot(data=followers, aes(x=Interval, y=Count, fill = "WHITE")) + geom_bar(stat="identity", fill="tomato") + ggtitle("Distribution of Follower Numbers") + theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title=element_text(family="Times", face="bold", size=20), axis.text=element_text(family="Times", face="bold", size=12))
count <- c()
for (i in (1: length(cutPoints))){
thisCount <- sum(profile$followers_count >= cutPoints[i] & profile$followers_count < cutPoints[i+1])
count <- c(count, thisCount)
}
intervals <- c("[0, 50)", "[50, 100)", "[100, 200)", "[200, 300)", "[300, 400)",
"[400, 500)", "[500, 1000)", "[1000, 2000)", "[2000, 3000)", "[3000, 4000)",
"[4000, 5000)", "[5000, 10000)", "[10000, 20000)", "[20000, 50000)",
"[50000, 100000)", "[100000, )")
followers <- data.frame(Interval=intervals, Count=count[1:16], lowerBound=cutPoints[1:16])
followers$Interval <- as.character(followers$Interval)
followers$Interval <- factor(followers$Interval, levels=intervals) # arrange in a specific order
ggplot(data=followers, aes(x=Interval, y=Count, fill = "WHITE")) + geom_bar(stat="identity", fill="tomato") + ggtitle("Distribution of Follower Numbers") + theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title=element_text(family="Times", face="bold", size=20), axis.text=element_text(family="Times", face="bold", size=12))
ggplot(data=followers, aes(x=Interval, y=Count)) + geom_bar(stat="identity", fill="tomato") + ggtitle("Distribution of Follower Numbers") + theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title=element_text(family="Times", face="bold", size=20), axis.text=element_text(family="Times", face="bold", size=12)) + theme_bw()
ggplot(data=followers, aes(x=Interval, y=Count)) + geom_bar(stat="identity", fill="tomato") + ggtitle("Distribution of Follower Numbers") + theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title=element_text(family="Times", face="bold", size=20), axis.text=element_text(family="Times", face="bold", size=12), panel.background = element_blank())
